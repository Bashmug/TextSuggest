#!/usr/bin/env python3
# coding: utf-8

# Background daemon for TextSuggest
# Auto-launches TextSuggest on suitable conditions

import time
import subprocess as sp
import sys
import os
import argparse
import gi
from gi.repository import GLib as glib
from libscreenkey import inputlistener

print('[INFO] (%s): Started textsuggestd.' % time.strftime('%X'))

def textsuggest_should_start(additional_exclude=None, not_exlude=None):

	# Check if it is appropriate to run TextSuggest

	# Checks for 'no':
	# - Is current app a code editor/IDE?
	# - Is current app a terminal?
	# - Is current app a password entry?

	# TODO: Add more checks

	active_window = sp.check_output(['xdotool getwindowfocus getwindowname'], shell=True)
	active_window = active_window.decode('utf-8').rstrip().lower()

	exclude_apps_list = ['guake', 'term', 'auth', 'password', 'gksu', 'atom', 'sublime', 'vim', 'sh', 'emacs', 'ide', 'komodo', 'jet', 'eclipse', 'beans', 'pycharm', 'webstorm', 'phpstorm']

	for app in exclude_apps_list:
		if app in active_window:
			return False

	return True

def start_textsuggest(textsuggest_args=None, textsuggest_exec=None):

	if textsuggest_exec is None:
		if os.path.isfile(os.path.join(os.getcwd(), 'TextSuggest.py')):
			textsuggest_exec = os.path.join(os.getcwd(), 'TextSuggest.py')
		elif os.path.isfile('/usr/bin/textsuggest'):
			textsuggest_exec = '/usr/bin/textsuggest'
		else:
			print('[ERROR] (%s): No TextSuggest executable found. Specify with --textsuggest-executable. Exiting...' % time.strftime('%X'))
			sys.exit(1)
	else:
		if not os.path.isfile(textsuggest_exec):
			print('[ERROR] (%s): Specified TextSuggest executable does not exist. Exiting...' % time.strftime('%X'))
			sys.exit(1)

	if textsuggest_args is None:
		textsuggest_args = ''

	textsuggest_proc = sp.Popen(['python3 ' + textsuggest_exec + ' ' + textsuggest_args], shell=True, stdout=sp.PIPE)

	textsuggest_proc.communicate()

	return textsuggest_proc.returncode

# Start inputlistener

def callback(data):

	values = {}

	for k in dir(data):
		if k[0] == '_': continue
		values[k] = getattr(data, k)

	if values['string'] is not None or values['string'] in ['\t', ' ', '  ', '\n', '\r', '\r\n', '']:
		if textsuggest_should_start():
			if not start_textsuggest() == 0:
				print('[INFO] (%s): TextSuggest was cancelled by user or found no words. Waiting until next word...' % time.strftime('%X'))
				time.sleep(6)
				# FIXME: Implement *actual* detection of end-of-word


glib.threads_init()
listener = inputlistener.InputListener(callback)

try:
	listener.start()
	glib.MainLoop().run()
except KeyboardInterrupt:
	pass

listener.stop()
listener.join()
