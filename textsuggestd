#!/usr/bin/env python3
# coding: utf-8

# Background daemon for TextSuggest
# Auto-launches TextSuggest on suitable conditions

import time
import subprocess as sp
import sys
import os
import argparse
import gi
from gi.repository import GLib as glib
from libscreenkey import inputlistener

arg_parser = argparse.ArgumentParser(
	description='''textsuggestd - Background daemon for TextSuggest''',
	formatter_class=argparse.RawTextHelpFormatter,
	epilog='More information in the manual page: textsuggestd(1)')

arg_parser.add_argument(
	'--exclude-apps', type=str,
	help='Specify apps excluded from suggestions. \n \n',
	nargs='+', required=False)

arg_parser.add_argument(
	'--include-apps', type=str,
	help='Override specified app in default list of excluded apps. \n \n',
	nargs='+', required=False)

arg_parser.add_argument(
	'--textsuggest-executable', type=str,
	help='Specify path to TextSuggest executable. \n \n',
	required=False)

arg_parser.add_argument(
	'--no-rofi-customization', action='store_true',
	help='Do not apply custom Rofi theme. \n \n',
	required=False)

arg_parser.add_argument(
	'--font', type=str,
	help='Specify font for Rofi. Must be in Pango format: FontName (Weight (optional) FontSize). \n \n',
	nargs='+', required=False)

arg_parser.add_argument(
	'--no-history', action='store_true',
	help='Disable the frequently-used words history (stored in ~/.config/textsuggest/history.txt) \n \n',
	required=False)

arg_parser.add_argument(
	'--language', type=str,
	help='Manually set language, in case script fails to auto-detect from keyboard layout. \n \n',
	required=False)

args = arg_parser.parse_args()

def get_cmd_out(command_list):

	return sp.check_output(command_list).decode('utf-8').rstrip('\r\n')

def log(message, level):

	colors = {
				'info'  : get_cmd_out(['tput', 'setaf', '4']),
				'warn'  : get_cmd_out(['tput', 'setaf', '3']),
				'error' : get_cmd_out(['tput', 'setaf', '1']),
				'reset' : get_cmd_out(['tput', 'sgr0'])
			 }

	if sys.stdout.isatty():
		colorize = True
	else:
		colorize = False

	if colorize:
		if level.startswith('WARN'):
			level = colors['warn'] + level + colors['reset']

		elif level == 'ERROR':
			level = colors['error'] + level + colors['reset']

		else:
			level = colors['info'] + level + colors['reset']

	level = '[%s]' % level

	print('%s (%s): %s' % (level, time.strftime('%X'), message))

log('Started textsuggestd.', 'INFO')

def textsuggest_should_start(additional_exclude=None, include=None):

	# Check if it is appropriate to run TextSuggest

	# Checks for 'no':
	# - Is current app a code editor/IDE?
	# - Is current app a terminal?
	# - Is current app a password entry?
	# - Is current app in additional_exclude?

	# TODO: Add more checks

	if include is None:
		include = []

	if additional_exclude is None:
		additional_exclude = []

	active_window = sp.check_output(['xdotool getwindowfocus getwindowname'],
	 								shell=True)
	active_window = active_window.decode('utf-8').rstrip().lower()

	excluded_apps = ['guake', 'term', 'auth', 'password', 'gksu', 'atom',
					 'sublime', 'vim', 'sh', 'emacs', 'ide', 'komodo', 'jet',
					 'eclipse', 'beans', 'pycharm', 'webstorm', 'phpstorm']

	for app in additional_exclude:
		if app not in excluded_apps:
			excluded_apps.append(app)

	for app in include:
		if app in excluded_apps:
			excluded_apps.remove(app)

	for app in excluded_apps:
		if app in active_window:
			return False

	return True

def start_textsuggest():

	if textsuggest_exec is None:
		if os.path.isfile(os.path.join(os.getcwd(), 'TextSuggest.py')):
			textsuggest_exec = os.path.join(os.getcwd(), 'TextSuggest.py')
		elif os.path.isfile('/usr/bin/textsuggest'):
			textsuggest_exec = '/usr/bin/textsuggest'
		else:
			log('No TextSuggest executable found.', 'ERROR')
			sys.exit(1)
	else:
		if not os.path.isfile(textsuggest_exec):
			log('Specified TextSuggest executable does not exist.', 'ERROR')
			sys.exit(1)

	textsuggest_args = []

	if args.no_rofi_customization:
		textsuggest_args.append('--no-rofi-customization')

	if args.language is not None:
		textsuggest_args.append(
			'--no-rofi-customization ' + ' '.join(args.language))

	if args.no_history:
		textsuggest_args.append('--no-history')

	if args.font is not None:
		textsuggest_args.append(
			'--font ' + ' '.join(args.font))

	textsuggest_exec = 'python3 ' + textsuggest_exec

	textsuggest_exec += ' ' + ' '.join(textsuggest_args)

	textsuggest_proc = sp.Popen([textsuggest_exec],
	 							shell=True, stdout=sp.PIPE)

	textsuggest_out, textsuggest_err = textsuggest_proc.communicate()

	if textsuggest_proc.returncode == 2 or textsuggest_out == '':
		return 'ERR_REJECTED'
	elif textsuggest_proc.returncode == 1:
		return 'ERR_NOWORDS'
	else:
		return 'OK'

# Start inputlistener

def callback(data):

	values = {}

	for k in dir(data):
		if k[0] == '_': continue
		values[k] = getattr(data, k)

	excluded_strs = ['\t', ' ', '  ', '\n', '\r', '\r\n', '']

	if values['string'] is not None or values['string'] not in excluded_strs:
		if textsuggest_should_start():
			textsuggest_retval = start_textsuggest()
			if textsuggest_retval in ['ERR_NOWORDS', 'ERR_REJECTED']:
				if textsuggest_retval == 'ERR_REJECTED':
					log('TextSuggest was cancelled. Waiting until next word.',
						'WARNING')
				else:
					log('Textsuggest found no words. Waiting until next word.',
						'WARNING')
				#time.sleep(6)
				# FIXME: Implement *actual* detection of end-of-word


glib.threads_init()
listener = inputlistener.InputListener(callback)

try:
	listener.start()
	glib.MainLoop().run()
except KeyboardInterrupt:
	pass

listener.stop()
listener.join()
